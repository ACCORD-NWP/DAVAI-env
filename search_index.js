var documenterSearchIndex = {"docs":
[{"location":"atos_bologna.html#Complementary-information-about-DAVAI-setup-on-aaabacad-HPC-machine-@-ECMWF/Bologna","page":"Atos","title":"Complementary information about DAVAI setup on aa|ab|ac|ad HPC machine @ ECMWF/Bologna","text":"","category":"section"},{"location":"atos_bologna.html#Quick-install","page":"Atos","title":"Quick install","text":"","category":"section"},{"location":"atos_bologna.html","page":"Atos","title":"Atos","text":"module use ~rm9/public/modulefiles\nmodule load davai","category":"page"},{"location":"atos_bologna.html","page":"Atos","title":"Atos","text":"I advise to put the first line in your .bash_profile, and execute the second only when needed.","category":"page"},{"location":"atos_bologna.html","page":"Atos","title":"Atos","text":"","category":"page"},{"location":"atos_bologna.html#Pre-requirements-(if-not-already-set-up)","page":"Atos","title":"Pre-requirements (if not already set up)","text":"","category":"section"},{"location":"atos_bologna.html","page":"Atos","title":"Atos","text":"Load the required environment for GMKPACK compilation and DAVAI execution. It is REQUIRED that you add the following to your .bash_profile:\nmodule purge\nmodule use /home/rm9/public/modulefiles\nmodule load intel/2021.4.0 prgenv/intel python3/3.10.10-01 ecmwf-toolbox/2021.08.3.0 davai/master\n\n# Gmkpack is installed at Ryad El Khatib's\nHOMEREK=~rme\nexport GMKROOT=$HOMEREK/public/bin/gmkpack\n# use efficiently filesystems\nexport ROOTPACK=$PERM/rootpack\nexport HOMEPACK=$PERM/pack\nexport GMKTMP=$TMPDIR/gmktmp\n# default compilation options\nexport GMKFILE=OMPIIFC2104.AA\nexport GMK_OPT=x\n# update paths\nexport PATH=$GMKROOT/util:$PATH\nexport MANPATH=$MANPATH:$GMKROOT/mani\nEnsure permissions to accord group (e.g. with chgrp) for support, something like:\nfor d in $HOME/davai $HOME/pack $SCRATCH/mtool/depot\ndo\nmkdir -p $d\nchgrp -R accord $d\nchmod g+s $d\ndone","category":"page"},{"location":"userguide/user-guide.html#DAVAÏ-User-Guide","page":"User Guide","title":"DAVAÏ User Guide","text":"","category":"section"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"A. Mary ","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"DAVAÏ embeds the whole workflow from the source code to the green/red light validation status: fetching sources from Git, building executables, running test cases, analysing the results and displaying them on a dashboard.","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"For now, the only build system embedded is gmkpack, but we expect other systems to be plugged when required. The second limitation of this version is that the starting point is still an IAL[1] Git reference only. The next version of the DAVAÏ system will include multi-projects/repositories fetching, using the bundle concept as starting point.","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"The dimensioning of tests (grid sizes, number of observations, parallelization...) is done in order to conceal representativity and execution speed. Therefore, in the general usecases, the tests are supposed to run on HPC. A dedicated usecase will target smaller configurations to run on workstation (not available yet). An accessible source code forge is set within the ACCORD consortium to host the IAL central repository on which updates and releases are published, and where integration requests will be posted, reviewed and monitored.","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"By the way: DAVAI stands for \"Device Aiming at the VAlidation of IAL\"","category":"page"},{"location":"userguide/user-guide.html#Test-an-IAL-development","page":"User Guide","title":"Test an IAL development","text":"","category":"section"},{"location":"userguide/user-guide.html#Create-your-branch,-containing-your-modifications","page":"User Guide","title":"Create your branch, containing your modifications","text":"","category":"section"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"To use DAVAÏ to test your contribution to the next development release, you need to have your code in a Git branch starting from the latest official release (e.g. CY48T1 tag for contributions to 48T2, or CY49 tag for contributions to 49T1).","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"In the following the example is taken on a contribution to 48T2:","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"In your repository (e.g. ~/repositories/arpifs – make sure it is clean with git status beforehand), create your branch:\nbash   git checkout -b <my_branch> [<starting_reference>]\n(e.g. git checkout -b mary_CY48T1_cleaning CY48T1)  !!! note it is strongly recommended to have explicit branch names with regards to their origin and their owner, hence the legacy branch naming syntax <user>_<CYCLE>_<purpose_of_the_branch>\nImplement your developments in the branch.  It is recommended to find a compromise between a whole development in only one commit, and a large number of very small commits (e.g.  one by changed file). In case you then face compilation or runtime issues then, but only if you haven't pushed it yet, you can amend[2] the latest commit to avoid a whole series of commits  just for debugging purpose.  !!! note       DAVAÏ is currently able to include non-committed changes in the compilation and testing. However, in the next version based on bundle, this might not be possible anymore.  ","category":"page"},{"location":"userguide/user-guide.html#Run-tests","page":"User Guide","title":"Run tests","text":"","category":"section"},{"location":"userguide/user-guide.html#Setup-your-experiment","page":"User Guide","title":"Setup your experiment","text":"","category":"section"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"Create your experiment, specifying which version of the tests you  want to use:\ndavai-new_xp <my_branch> -v <tests_version>\n(e.g. davai-new_xp mary_CY48T1_cleaning -v DV48T1)  hookrightarrow An experiment with a unique experiment ID is  created and prompted as output of the command, together with its  path.\nto know what is the version to be used for a given development: See here`\nsee davai-new_xp -h for more options on this command\nsee   Appendix [sect:tests_versioning]{reference-type=\"ref\"   reference=\"sect:tests_versioning\"} for a more comprehensive   approach to tests versioning.\nif the version you are requesting is not known, you may need to   specify the DAVAI-tests origin repository from which to   clone/fetch it, using argument   –origin <URL of the remote DAVAI-tests.git>\nhookrightarrow Go to the (prompted) experiment directory.\n \n If you want to set some options differently from the default, open  file conf/davai_nrv.ini and tune the parameters in the [DEFAULT]  section. The usual tunable parameters are detailed in  Section [sect:options]{reference-type=\"ref\"  reference=\"sect:options\"}.\nLaunch the build and tests:\ndavai-run_xp\nAfter initializing the Ciboulaï page for the experiment, the command  will first run the build of the branch and wait for the executables  (that step may take a while, depending on the scope of your  modifications, especially with several compilation flavours). Once  build completed, it will then launch the tests (through scheduler on  HPC).","category":"page"},{"location":"userguide/user-guide.html#Monitor-and-inspect-results","page":"User Guide","title":"Monitor and inspect results","text":"","category":"section"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"Monitor the execution of the jobs with the scheduler (with SLURM:  squeue -u <user>)\nCheck the tests results summary on the Ciboulaï dashboard, which  URL is prompted at the end of tests launch, or visible in the config  file:\nopen Ciboulaï dashboard in a web browser:   (https://www.umr-cnrm.fr/davai/)\nTo guide you in the navigation in Ciboulaï, cf.   Section [sect:ciboulai_navigation]{reference-type=\"ref\"   reference=\"sect:ciboulai_navigation\"}.\nTo get the paths to a job output or abort directory: button   [+] then ***Context***.\nif the dashboard is not accessible, a command-line version of   the status is possible; in the XP directory, run:\ndavai-xp_status\nto see the status summary of each job. The detailed status and   expertise of tests are also available as json files on the   Vortex cache:\n  belenos:/scratch/mtool/<user>/cache/vortex/davai/<vconf>/<xpid>/summaries_stack/\n  or\ndavai-xp_status -t <task>\nRightarrow To get the paths to a job output or abort   directory: davai-xp_status -t <task> then open the itself   file and look in the ***Context*** section.","category":"page"},{"location":"userguide/user-guide.html#And-then-?-{#and-then-.unnumbered}","page":"User Guide","title":"And then ? {#and-then .unnumbered}","text":"","category":"section"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"If everything is OK (green) at the end of executions, your branch is   validated !\nIf not, cf.   Section [sect:options]{reference-type=\"ref\"   reference=\"sect:options\"} to re-compile a code modification and   re-run tests.","category":"page"},{"location":"userguide/user-guide.html#First-tips","page":"User Guide","title":"First tips","text":"","category":"section"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"All Davai commands are prefixed davai-* and can be listed with   davai-help. All commands are auto-documented with option -h.\nIf the pack preparation or compilation fails, for whatever   reason, the build step prints an error message and the   davai-run_xp command stops before running the tests. You can find   the output of the pack preparation or compilation in logs/   directory, as any other test log file.\n  A very common error is when the pack already exists; if you actually   want to overwrite the contents of the pack (e.g. because you just   fixed a code issue in the branch), you may need option   -e/–preexisting_pack:\ndavai-run_xp -e\n  or\n  davai-build -e\nOtherwise, if the pack preexists independantly for valid reasons,   you will need to move/delete the existing pack, or rename your   branch.\nThe tests are organised as ***tasks*** and ***jobs***:\na ***task*** consists in fetching input resources, running an   executable, analyzing its outputs to the Ciboulai dashboard and   dispatching (archiving) them: 1 test = 1 task\na ***job*** consists in a sequential driver of one or several   task(s): either a flow sequence (i.e. outputs of task N is an   input of task N+1) or family sequence (e.g. run independantly an   IFS and an Arpege forecast)\nTo fix a piece of code, the best is to modify the code in your   Git repo, then re-run\ndavai-run_xp -e (or davai-build -e and then davai-run_tests).\nYou don't necessarily need to commit the change rightaway, the   non-committed changes are exported from Git to the pack. Don't   forget to commit eventually though, before issuing pull request.\nTo re-run one job only after re-compilation, type\n  davai-run_tests -l\n  to list the jobs and then\n  davai-run_tests <category.job>\n  e.g.\n  davai-run_tests forecasts.standalone_forecasts\nThe syntax category.job indicates that the job to be run is the   ***Driver*** in ./tasks/category/job.py\nTo re-run a single test within a job, e.g. the IFS forecast in   forecasts/standalone_forecasts.py: edit this file, comment the   other Family(s) or Task(s) (nodes) therein, and re-run the job   as indicated above.\nEventually, after code modifications and fixing particular   tests, you should re-run the whole set of tests, to make sure   your fix does not break any other test.","category":"page"},{"location":"userguide/user-guide.html#Navigation-in-*Ciboulaï*","page":"User Guide","title":"Navigation in Ciboulaï","text":"","category":"section"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"http://intra.cnrm.meteo.fr/gws/davai","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"On the main page, the numbers in the columns to the right indicate   the numbers of jobs which results are respectively:\n: bit-reproducible or within acceptable numerical error;\n: numerically different;\n: jobs that have crashed before end;\n: the experts were not able to state on the test results, to be   checked manually;\n: these tests have no expected result to be checked: they are   assumed OK since they did not crash.\nWhen you get to an experiment page, you can find a few key features   of the experiment, in the header. The [+] close to the XPID   (experiment ID) will provide more. The others [+] to the left of   the uenv's provide inner details from each one.\n  The summary of tests results is also visible on the top right.\nEach task is summarized: its Pending/Crashed/Ended status, and in   case of Ended, the comparison status. As a first glance, a main   metric is shown, assumed to be the most meaningful for this test.\nThe ‘drHook rel diff’ and ‘rss rel diff’ columns show the   relative difference in respectively: the elapse time of the   execution, and the memory consumption (RSS) compared to the   reference. ***However, so far the drHook figures have proven to be   too volatile from an execution to another, to be meaningful. Don't   pay too much attention, for now. Similarly, the RSS figures remain   to be investigated (relevance and availability).***\nA filter is available to show only a subset of tasks.\nWhen you click on the [+] of the more column, the detailed   expertise is displayed:\nthe itself tab will show info from each Expert about the   task independantly from reference\nthe continuity tab will show the compared results from each   Expert against the same task from reference experiment\nthe consistency tab will show the compared results from each   Expert against a different reference task from the same   experiment, when meaningful (very few cases, so far)\nClick on each Expert to unroll results.\nAt the experiment level as well as at the task level, a little pen   symbol enables you to annotate it. That might be used for instance   to justify numerical differences.","category":"page"},{"location":"userguide/user-guide.html#How-it-works,-briefly","page":"User Guide","title":"How it works, briefly","text":"","category":"section"},{"location":"userguide/user-guide.html#Organisation-of-an-experiment","page":"User Guide","title":"Organisation of an experiment","text":"","category":"section"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"The davai-new_xp command-line prepares a \"testing experiment\" directory, named uniquely after an incremental number, the platform and the user.","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"This testing experiment will consist in:","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"conf/davai_nrv.ini : config file, containing parameters such as   the git reference to test, davai options, historisations of input   resources to use, tunings of tests (e.g. the input obs files to take   into account) and profiles of jobs\nconf/<USECASE>.yaml : contains an ordered and categorised list of   jobs to be ran in the requested usecase.\nconf/sources.yaml : information about the sources to be tested, in   terms of Git or bundle\ntasks/ : templates of single tasks and jobs\nlinks to the python packages that are used by the scripts (vortex,   epygram, ial_build, ial_expertise)\na logs directory/link will appear after the first execution,   containing log files of each job.\nDAVAI-tests : a clone of the DAVAI-tests repository, checkedout on   the requested version of the tests, on which point the tasks/ and   conf/","category":"page"},{"location":"userguide/user-guide.html#Running-jobs-on-HPC-:-MTOOL","page":"User Guide","title":"Running jobs on HPC : MTOOL","text":"","category":"section"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"On HPCs, the compute nodes are \"expensive\" and so we try as much as possible to save the elapse time spent on compute nodes for actual computations, i.e. execution of the executable. Therefore in DAVAÏ, the generation of the scripts uses the MTOOL filter to replicate and cut a job script into several ***steps***:","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"on transfer nodes, fetch the resources, either locally on the file  system(s) or using FTP connections to outer machines\non compute nodes, execute the AlgoComponent(s)\non transfer nodes, dispatch the produced output\nfinal step to clean the temporary environment created for the jobs","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"In addition to this separation and chaining these 4 steps, MTOOL initially sets up a clean environment with a temporary unique execution directory. It also collects log files of the script's execution, and in the case of a failure (missing input resources, execution aborted), it takes a screenshot of the execution directory. Therefore for each job, one will find :","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"a ***depot*** directory in which to find the actual 4 scripts and   their log files\nan ***abort*** directory, in which to find the exact copy of the   execution directory when the execution failed","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"These directories are registered by the DAVAÏ expertise and are displayed in the ***Context*** item of the expertise for each task in Ciboulaï.","category":"page"},{"location":"userguide/user-guide.html#Jobs-and-tasks","page":"User Guide","title":"Jobs & tasks","text":"","category":"section"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"A Task is generally understood as the triplet: (1) fetch input resources, (2) run an executable, (3) dispatch the produced output. In a Vortex script, the tasks are written in Python, using classes and functionalities of the Vortex Python packages. In particular, running an executable is wrapped in what is called an AlgoComponent. In DAVAÏ, we add a second AlgoComponent right after the nominal one in (2) to \"expertise\" the outputs and compare to a reference.","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"The tasks templates are stored in the tasks/ directory, and all inherit from the abstract class:\nvortex.layout.nodes.Task. A Test is a Task that includes an expertise to a reference.\nA Job is understood as a series of one or several tasks, executed sequentially within one \"job submission\" to a job scheduler.","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"The jobs templates are stored in the tasks/ directory, and are defined as a function setup that return a Driver object, which itself contains a series of Task(s) and Family(ies).","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"In DAVAÏ, the idea is to have the tasks in independant jobs as far as possible, except: for flow-dependant tasks, or for loops on clones of a task with a varying parameter.","category":"page"},{"location":"userguide/user-guide.html#More-details","page":"User Guide","title":"More details","text":"","category":"section"},{"location":"userguide/user-guide.html#(Re-)Build-of-executables","page":"User Guide","title":"(Re-)Build of executables","text":"","category":"section"},{"location":"userguide/user-guide.html#Build-with-gmkpack","page":"User Guide","title":"Build with gmkpack","text":"","category":"section"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"The tasks in the build job are respectively in charge of:","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"gitref2pack : fetch/pull the sources from the requested Git   reference and set one or several incremental gmkpack's pack(s) –   depending on compilation_flavours as set in config. The packs are   then populated with the set of modifications, from the latest   official tag to the contents of your branch (including non-commited   modifications).\npack2bin : compile sources and link necessary executables (i.e.   those used in the tests), for each pack flavour.","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"In case the compilation fails, or if you need to (re-)modify the sources for any reason (e.g. fix an issue):","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"implement corrections in the branch (commited or not)\nre-run the build:\n davai-build -e\n (option -e or –preexisting_pack assumes the pack already  preexists; this is a protection against accidental overwrite of an  existing pack. The option can also be passed to davai-run_xp)\nand then if build successful davai-run_tests","category":"page"},{"location":"userguide/user-guide.html#Build-with-[cmake/makeup/ecbuild...]","page":"User Guide","title":"Build with [cmake/makeup/ecbuild...]","text":"","category":"section"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"Not implemented yet.","category":"page"},{"location":"userguide/user-guide.html#Re-run-a-test","page":"User Guide","title":"Re-run a test","text":"","category":"section"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"The Davai command davai-run_tests launches all the jobs listed in conf/<USECASE>.yaml, sequentially and independantly (i.e. without waiting for the jobs to finish). The command can also be used complementary:","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"to list the jobs that would be launched by the command, according to   the conf/<USECASE>.yaml config file:   davai-run_tests -l\nto run a single job:\ndavai-run_tests <job identifier as given by -l option>","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"Some tests are gathered together within a single job. There are 2 reasons for that: if they are an instance of a loop (e.g. same test on different obstypes, or different geometries), or if they have a flow-dependancy with an upstream/downstream test (e.g. bator  screening  minimization).","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"When a test fails within a job and the user wants to re-run it without re-runnning the other tests from the same job, it is possible to do so by deactivating them[3] :","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"loops: to deactivate members of a loop:\n  open config file conf/davai_.ini, and in the section corresponding   to the job or family, the loops can be found as list(...), e.g.   obstypes, rundates or geometrys. Items in the list can be   reduced to the only required ones (note that if only one item   remains, one needs to keep a final \",\" within the parenthesis).\ndependancy: open driver file corresponding to the job name in   tasks/ directory, and comment out (#) the unrequired tasks or   families of nodes, leaving only the required task.","category":"page"},{"location":"userguide/user-guide.html#Investigating-a-problem","page":"User Guide","title":"Investigating a problem","text":"","category":"section"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"The usecase parameter of an experiment (to be set in the davai-new_xp command) determines the span of tests to be generated and run. Several usecases have been (or will be) implemented with various purposes:","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"NRV (default): Non-Regression Validation, minimal set of tests   that any contribution must pass.\nELP: Exploration and Localization of Problems, extended set of   isolated components, to help localizing an issue\nPC: [not implemented yet] set of toy tests ported on   workstation; the compilation with GNU (usually less permissive than   vendor compilers) enables to raise issues that might not have been   seen with NRV/ELP tests.","category":"page"},{"location":"userguide/user-guide.html#Smaller-tests-for-smaller-problems","page":"User Guide","title":"Smaller tests for smaller problems","text":"","category":"section"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"To investigate a non-reproducibility or crash issue, the ELP usecase of Davaï can help localizing its context, with a set of more elementary tests, that run smaller parts of code.","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"To switch to this mode:","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"create a new experiment with the same arguments but -u ELP and go   in it\nfor a faster build (no re-compilation), edit config file   conf/davai_elp.ini and in section [gitref2pack], set   cleanpack = False\ndavai-run_xp","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"Instead of 50^+ tests, the ELP mode will provide hundreds of more elementary and focused tests. For instance, if you had a problem in the 4DVar minimization, you can run the 3 observation operators tests, observation by observation, and/or a screening, and/or a 3DVar or 4DVar single-obs minimization, in order to understand if the problem is in a specific observation operator (which obs type ?), in its direct, TL or AD version, or in the Variational algorithm, or in the preceding screening, and so on...","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"The user may want, at some point, to run only a subset of this very large set of tests. In this case, simply open the conf/ELP.yaml and comment (#) the launch of the various jobs. To reduce the number of tests that are innerly looped, e.g. the loop on observation types within the *__obstype jobs: open config file conf/davai_elp.ini, look for the section named after job name and select the obstype(s) to be kept only in list.","category":"page"},{"location":"userguide/user-guide.html#Build-options","page":"User Guide","title":"Build options","text":"","category":"section"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"The choice of a build system is corollary to the versioning of the tests. However, at time of writing, only gmkpack is available within DAVAÏ.","category":"page"},{"location":"userguide/user-guide.html#Build-with-gmkpack-2","page":"User Guide","title":"Build with gmkpack","text":"","category":"section"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"In the [gmkpack] section of config file conf/davai_.ini:","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"to make a main pack, instead of an incremental pack\n  hookrightarrow set packtype = main\nto set the list of compilation flavours to build (a.k.a. compiler   label/flag)\n  hookrightarrow use compilation_flavours\n  ! if you modify this, you potentially need to modify the   compilation_flavour accordingly in the \"families\" sections that   define it, as well as the programs_by_flavour that define the   executables to be built for specific flavours","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"In the [gitref2pack] section:","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"to use a different $ROOTPACK (i.e. a different source of ancestor   packs, for incremental packs)\n  hookrightarrow use rootpack\n  (preferably to modifying the environment variable, so that will be   specific to that experiment only)\nto avoid cleaning all .o and .a when (re-)populating the pack:\n  hookrightarrow set cleanpack = False\n","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"In the [pack2bin] section:","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"to make the pack2bin task crash more quickly after a   compilation/link error, or do not crash at all\n  hookrightarrow set fatal_build_failure =\n__finally__ Rightarrow crash after trying to compile and   build all executables\n__any__ Rightarrow crash if compilation fails or right   after the first executable linking to fail\n__none__ Rightarrow never == ignore failed builds\nto re-generate ics_ files before building\n  hookrightarrow set regenerate_ics = True\nto (re-)compile local sources with gmkpack’s option Ofrt=2 (i.e.   -O0 -check bounds):\n  hookrightarrow set Ofrt = 2\nto use more/less threads for compilating (independant) sources files   in parallel:\n  hookrightarrow use threads\nto change the list of executables to be built, by default or   depending on the compilation flavour:\n  hookrightarrow use default_programs and programs_by_flavour","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"Also, any gmkpack native variables can be set in the .bash_profile, e.g. ROOTPACK, HOMEPACK, etc... Some might be overwritten by the config, e.g. if you set rootpack in config file.","category":"page"},{"location":"userguide/user-guide.html#Build-with-[cmake/makeup/ecbuild...]-2","page":"User Guide","title":"Build with [cmake/makeup/ecbuild...]","text":"","category":"section"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"Not implemented yet.","category":"page"},{"location":"userguide/user-guide.html#Input-data","page":"User Guide","title":"Input data","text":"","category":"section"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"DAVAÏ gets its input data through 2 providers:","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"\"shelves\" (pseudo Vortex experiments) for the data supposed to   flow in real case (e.g. initial conditions file, observations files,   etc...), where this data is statically stored, usually in a cache   to fetch it faster\n\"uget\" for the static data (namelists, climatologic files,   parameter files...), catalogued in ***uenv*** files.","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"These shelves and uenv catalogs (cf. uget/uenv help documentation for the use of this tool.) can be modified in the [DEFAULT] section of config file.","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"In case your contribution needs a modification in these, ***don't forget to describe these changes in the integration request***.","category":"page"},{"location":"userguide/user-guide.html#Other-options","page":"User Guide","title":"Other options","text":"","category":"section"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"In the [DEFAULT] section, a few other general options can be set to tune the behaviour of the experiment:","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"expertise_fatal_exceptions to raise/ignore errors that could occur   in the expertise subsequent to the tests\ndrhook_profiling to activate DrHook profiling or not\nignore_reference to force to ignore reference outputs (and so   deactivate comparison)\narchive_as_ref to archive the outputs (saving of a reference only)","category":"page"},{"location":"userguide/user-guide.html#User-configuration","page":"User Guide","title":"User configuration","text":"","category":"section"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"Some more general parameters are configurable, such as the default directory in which the experiments are stored, or the directory in which the logs of jobs are put. This can be set in \\sim/.davairc/user_config.ini. If the user, for whatever reason, needs to modify the packages linked in the experiments on a regular basis, it is possible to specify that in the same user config file. An example of these variables is available in the DAVAI-env repository, under templates/user_config.ini.","category":"page"},{"location":"userguide/user-guide.html#Parallel-profiling","page":"User Guide","title":"Parallel profiling","text":"","category":"section"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"Each job has a section in the config file, in which one can tune the requested profile parameters to the jobs scheduler:","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"time : elapse time\nntasks : number of MPI tasks per node\nnnodes : number of nodes\nopenmp : number of OpenMP threads\npartition : category of nodes\nmem : memory (helps to prevent OOM)","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"The total number of MPI tasks is therefore nnodes \\times ntasks, and is automatically replaced in namelist","category":"page"},{"location":"userguide/user-guide.html#Experts-thresholds","page":"User Guide","title":"Experts thresholds","text":"","category":"section"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"Experts are the tools developed to parse outputs of the tasks and compare them to a reference. Each expert has its expertise field: norms, Jo-tables, etc...","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"See Information on experts in the left tab of Ciboulaï to get information about the tunable thresholds of the various experts (e.g. the allowed error on Jo). Then, set according attributes in the experts definitions in the concerned tasks.","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"Again, if you need to modify these, please ***explain and describe in the integration request***.","category":"page"},{"location":"userguide/user-guide.html#Versioning-of-tests","page":"User Guide","title":"Versioning of tests","text":"","category":"section"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"The following reasons may require to update the tests:","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"Update the input resources or a task template script, to change  the purpose or context of a test (e.g. new observations or  modified namelists, to pull the tests more closely to operational  configurations, ...). This usually comes with a change in the  targeted tests outputs.\nAdd new tests.\nUpdate the resources to adapt to a code change (e.g. new  radiative coefficients files format, or a mandatory namelist  change), with or without change in the results.","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"Therefore it is necessary to track the evolutions of the tests properly, and version them clearly, so that it is clear what fixed or evolving version is to be used in any context. Hence the existence of the DAVAI-tests repository.\nThe first two kinds of evolutions (a. and b.) are not necessarily linked to a contribution of code to the IAL repository, and therefore can be implemented at any moment in a dedicated branch of the tests repository (DAVAI-tests). This is described in more details in section [sect:add-modify-tests]{reference-type=\"ref\" reference=\"sect:add-modify-tests\"}.","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"The latter is on the other hand attached to a contribution, and will require to be given together with the contribution for an integration, and be integrated itself in an evolving tests branch dedicated to test successive steps of the IAL integration branch. This case is detailed in more details in section [sect:parallel-branches]{reference-type=\"ref\" reference=\"sect:parallel-branches\"}.","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"To follow more easily what version of the tests should be used in particular for contributions to the IAL codes, it is proposed to adopt a nomenclature that maps the IAL releases and integration/merge branches, but replacing \"CY\" by \"DV\" (for DAVAÏ), as illustrated on Figure [fig:tests_versioning]{reference-type=\"ref\" reference=\"fig:tests_versioning\"}. With this principle, the version of the tests to be used by default would be, for example:","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"for a development based on CY49 rightarrow DV49\nfor an integration branch towards CY49T1, named dev_CY49_to_T1   rightarrow dev_DV49_to_T1","category":"page"},{"location":"userguide/user-guide.html#Adding-or-updating-tests-independently-from-the-code","page":"User Guide","title":"Adding or updating tests independently from the code","text":"","category":"section"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"The tests modifications which are not intrinsically linked with a contribution (adding tests or modifying a test to modify its behaviour) can be done at any moment, in a development branch of the tests repository. However, in order not to disturb the users and integrators, they should be merged into the next official version of tests (i.e. the version used for contributions and integrations to IAL) [only between a declaration of an IAL release and a call for contribution]{.underline}.","category":"page"},{"location":"userguide/user-guide.html#Evolution-of-the-tests-w.r.t.-Integration-of-an-IAL-release","page":"User Guide","title":"Evolution of the tests w.r.t. Integration of an IAL release","text":"","category":"section"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"In the context of integration of an IAL release, it is suitable that the tests change as little as possible during the successive integration of contributions. Therefore we will set a version of the tests at the beginning of integration, and only adapt it for the contributions that require an update of the tests.\nLet's consider the process of integration of contribution branches on top of CY49 to build a CY49T1. For that purpose we would have set a reference experiment on CY49, hereafter named x0, generated with an identified version of the tests. That version of the tests would then be updated with x0 as reference experiment (ref_xpid), and tagged DV49. All contributions to CY49T1 would then be required to be tested with this version DV49 (hence against reference experiment x0). Cf. section [sect:set_a_ref_tests_version]{reference-type=\"ref\" reference=\"sect:setareftestsversion\"} for more details about setting up a reference tests version and experiment.","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"Suppose then that we have 5 of these contribution branches based on CY49, and an integration branch named dev_CY49_toT1. These 4 contributions may have different levels of reproducibility: they may conserve the results or not; they may require resources/tests adaptations (e.g. namelist updates, ...) or not, in which case they come with tests adaptations in an associated tests branch. Cf. the table","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"branch results test XPID resources tested with integration XPID\nb1 = x1 = DV49 xi1\nb2 neq x2 = DV49 xi2\nb3 = x3 neq rightarrow DV49_b3 xi3\nb4 neq x4 neq rightarrow DV49_b4 xi4","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"In parallel to the integration branch dev_CY49_toT1, we start a tests branch from DV49 to collect the necessary adaptations of the tests, similarly named dev_DV49_toT1, which will be used to validate the integration branch, and updated as required along the integration.","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"In case some intermediate versions of the integration branch are tagged and some branches are based/rebased on these tagged versions, we could also tag accordingly the tests branch if necessary.\nThe reference experiment for the integration branch is at any moment, by default, the experiment which tested the formerly integrated branch, e.g. the reference for xi2 is xi1. However, that may not be true in some cases, some of these being potentially more tricky to validate, as will be shown in the following example.","category":"page"},{"location":"userguide/user-guide.html#Steps-and-updates-in-the-Continuous-Integration-process","page":"User Guide","title":"Steps and updates in the Continuous Integration process","text":"","category":"section"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"Integration of b1 :\nReference: x0 is the default reference xp in dev_DV49_toT1   config file\nTests: b1 did not require to adapt the tests rightarrow we   can test with branch dev_DV49_toT1 unchanged (and still equal   to DV49)\ndavai-new_xp dev_CY49_toT1 -v dev_DV49_toT1\n hookrightarrow xi1 == x1 == x0\nIntegration of b2 :\nReference: xi1 should normally be the reference xp, but since   its results are bit-identical to x0 as opposed to x2, it is   more relevant to compare to x2, to check that the merge of   b1 and b2 still give the same results as b2\nTests: b2 did not require to adapt the tests rightarrow   tests branch DV49_toT1 unchanged\ndavai-new_xp dev_CY49_toT1 -v DV49_toT1\n and set ref_xpid = x2\n hookrightarrow xi2 == x2\nthen ref_xpid should be set to xi2 in branch DV49_toT1\nIntegration of b3 :\nReference: b3 does not change the results, so reference   experiment is as expected by default xi2\nTests: b3 requires tests adaptations (DV49_b3) rightarrow   update dev_DV49_toT1 by merging DV49_b3 in\ndavai-new_xp dev_CY49_toT1 -v DV49_toT1\n hookrightarrow xi3 == xi2\nIntegration of b4 : (where it becomes more or less tricky)\nReference: b4 changes the results, but the results of xi3   (current default reference for integration branch) are also   changed from x0 (since b2) rightarrow the reference   experiment becomes less obvious !\n  The choice of the reference should be made depending on the   width of impact on both sides:\nif there is more differences in the results between  dev_CY49_toT1 and CY49 than between b4 and CY49:\n rightarrow xi3 should be taken as reference, and the  differences finely compared to those shown in x4\nif there is more differences in the results between b4 and  CY49 than between dev_CY49_toT1 and CY49:\n rightarrow x4 should be taken as reference, and the  differences finely compared to those shown in xi3’, where  xi3’ is a \"witness\" experiment comparing the integration  branch after integration of b3 (commit <c3>) to CY49  (experiment x0):\n davai-new_xp <c3> -v dev_DV49_toT1\n and set ref_xpid = x0\n hookrightarrow xi3’\nThis is still OK if the tests affected by dev_CY49_toT1 (via   b2) and the tests affected by b4 are not the same subset, or   if at least if the affected fields are not the same. If they are   (e.g. numerical differences that propagate prognostically   through the model), the conclusion becomes much more difficult   !!!\n  In this case, we do not really have explicit recommendation; the   integrators should double-check the result of the merge with the   author of the contribution b4. Any idea welcome to sort it   out.\nTests: b4 requires tests adaptations (DV49_b4) rightarrow   update dev_DV49_toT1 by merging in DV49_b4 in\ndavai-new_xp dev_CY49_toT1 -v dev_DV49_toT1\n and set ref_xpid = xi3|xi4\n hookrightarrow xi4","category":"page"},{"location":"userguide/user-guide.html#Setting-up-a-reference-version-of-the-tests-and-an-associated-reference-experiment","page":"User Guide","title":"Setting up a reference version of the tests and an associated reference experiment","text":"","category":"section"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"! WORK IN PROGRESS...","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"We describe here how to set up a reference version of the tests and an associated reference experiment, typically for developments based on a given IAL release to be validated against this release.","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"For the example, let's consider CY49 and setting up a DV49 version for it, including its reference experiment, to validate the contributions to CY49T1.","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"Choose an initial version of the tests you want to be used. It may  probably not be the previous reference one (e.g. DV48T2 or  dev_CY48T1_toT2), as we may often want to modify or add tests in  between cycles.\nIn your development DAVAI-tests repository, make a branch starting  from this version and check it out, e.g.:\n git checkout -b on_49 [<chosen_initial_ref]\nSet the reference experiment:\n davai-new_xp CY49 -v on_49 -u ELP –origin <URL of my DAVAI-tests repo>\n hookrightarrow dv-xxxx-machine@user\n Note:\nAs ELP usecase encompasses NRV, reference experiments should use   this usecase so it could be used as a reference for both   usecases.\n–origin <URL...> to clone that repo in which you created the   branch\nin config of the experiment, set archive_as_ref = True : the   experiment will serve as a reference, so we want to archive its   results\nin config of the experiment, set ignore_reference = True : if   you are confident enough with the test version, it may not be   useful/relevant to compare the experiment to any reference one.\nRun the experiment\nUpdate the DAVAI-tests repository:\ndefault config file for this machine (conf/<machine>.ini: with   the name of this experiment as ref_xpid (and potentially the   usecase chosen in minor case as ref_vconf)\nREADME.md: the table of correspondance of branches and tests\nThen commit, tag (DV49) and push:\n   git commit -am \"Set reference experiment for <machine> as <dv-xxxx-machine@user>\"\n   git tag DV49\n   git push <remote>\n   git push <remote> DV49","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"This way the tests experiment generated using davai-new_xp -v DV49 will use this version and be compared to this reference experiment.","category":"page"},{"location":"userguide/user-guide.html#Internal-organization-of-DAVAÏ","page":"User Guide","title":"Internal organization of DAVAÏ","text":"","category":"section"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"[1]: IAL = IFS-Arpege-LAM","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"[2]: git commit –amend","category":"page"},{"location":"userguide/user-guide.html","page":"User Guide","title":"User Guide","text":"[3]: including upstream tasks that produce flow-resources for the targeted test, as long as the resources stay in cache","category":"page"},{"location":"forge-branch.html","page":"Prepare branch","title":"Prepare branch","text":"In your IAL repo:","category":"page"},{"location":"forge-branch.html","page":"Prepare branch","title":"Prepare branch","text":"Make sure you have latest releases: git fetch accord --tags\nCreate your branch on top of CY49T0_bf.00(contains a workaround/bugfix for ECMWF HPC): git checkout -b <user>_CY49T0_<my_awesome_dev> CY49T0_bf.00\nImplement your development therein ... If your dev is a rephasing of a branch developped on an earlier release, you can \"cherry-pick\" the commits from the original branch (git cherry-pick -x <commit>)\nCommit as necessary, with intermediate granularity: not 1 commit for one big development, but not 1 commit for each modified line either.\nTest your branch with Davai: README and User Guide referenced therein\nWhen happy with tests results, check for uncommited modifications, then push to your fork, and finally send the Pull Request.","category":"page"},{"location":"index.html#Davai","page":"Davai","title":"Davai","text":"","category":"section"},{"location":"belenos.html#Complementary-information-about-DAVAI-setup-on-belenos-HPC-machine-@-MF","page":"Belenos","title":"Complementary information about DAVAI setup on belenos HPC machine @ MF","text":"","category":"section"},{"location":"belenos.html#Quick-install","page":"Belenos","title":"Quick install","text":"","category":"section"},{"location":"belenos.html","page":"Belenos","title":"Belenos","text":"module use ~mary/public/modulefiles\nmodule load davai","category":"page"},{"location":"belenos.html","page":"Belenos","title":"Belenos","text":"I advise to put the first line in your .bash_profile, and execute the second only when needed.","category":"page"},{"location":"belenos.html","page":"Belenos","title":"Belenos","text":"","category":"page"},{"location":"belenos.html#Pre-requirements-(if-not-already-set-up)","page":"Belenos","title":"Pre-requirements (if not already set up)","text":"","category":"section"},{"location":"belenos.html","page":"Belenos","title":"Belenos","text":"Load modules (conveniently in your .bash_profile):\nmodule load python/3.7.6\nmodule load git\nConfigure your ~/.netrc file for FTP communications with archive machine hendrix, if not already done:\nmachine hendrix login <your_user> password <your_password>\nmachine hendrix.meteo.fr login <your_user> password <your_password>\n(! don't forget to chmod 600 ~/.netrc if you are creating this file !)\nTo be updated when you change your password\nConfigure ftserv (information is stored encrypted in ~/.ftuas):\nftmotpasse -h hendrix -u <your_user>\n(and give your actual password)\nAND\nftmotpasse -h hendrix.meteo.fr -u <your_user>\n(same)\nTo be updated when you change your password\nConfigure Git proxy certificate info :\ngit config --global http.sslVerify false\nEnsure SSH connectivity between compute and transfer nodes, if not already done:\ncat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys","category":"page"},{"location":"belenos.html","page":"Belenos","title":"Belenos","text":"","category":"page"},{"location":"belenos.html#And-maybe","page":"Belenos","title":"And maybe","text":"","category":"section"},{"location":"belenos.html","page":"Belenos","title":"Belenos","text":"with a version of tests prior to DV48T1_op0.04-1, you may also need epygram:","category":"page"},{"location":"belenos.html","page":"Belenos","title":"Belenos","text":"~mary/public/EPyGrAM/stable/_install/setup_epygram.py -v\nthen to avoid a matplotlib/display issue, set:\nbackend : Agg in ~/.config/matplotlib/matplotlibrc","category":"page"},{"location":"forge-setup.html#Fork","page":"Setup","title":"Fork","text":"","category":"section"},{"location":"forge-setup.html","page":"Setup","title":"Setup","text":"The ACCORD-NWP central repository is accessible in reading mode to Accord members, but restricted in writing mode to administrators of the repo. Hence you need a clone of this repo on your github account, to which to push your branches to make them accessible to the integrators. This personal distant clone is called a \"Fork\".","category":"page"},{"location":"forge-setup.html","page":"Setup","title":"Setup","text":"On https://github.com/ACCORD-NWP/IAL click \"Fork\", uncheck \"Copy the master branch only\" then \"Create fork\". That can take a little while.","category":"page"},{"location":"forge-setup.html#Token","page":"Setup","title":"Token","text":"","category":"section"},{"location":"forge-setup.html","page":"Setup","title":"Setup","text":"SSH communications are blocked from certain platform (e.g. belenos), hence I recommend to use git through https to clone, fetch and pull from/to github.com.   This implies using a \"token\" as password; here's how-to.","category":"page"},{"location":"forge-setup.html","page":"Setup","title":"Setup","text":"Logged in on github.com, click on your avatar (on the right in the top banner), then \"Settings\" > \"Developer settings\" (bottom of the left column/menu) > \"Personal access tokens\" (classic) > \"Generate new token\" (classic), then give it a name, select an expiry date, check the \"repo\" checkbox, and finally \"Generate token\"\nSet your token in your ~/.netrc file:","category":"page"},{"location":"forge-setup.html","page":"Setup","title":"Setup","text":"echo \"machine github.com login <your github login> password <token>\" >> ~/.netrc","category":"page"},{"location":"forge-setup.html#Local-clone","page":"Setup","title":"Local clone","text":"","category":"section"},{"location":"forge-setup.html","page":"Setup","title":"Setup","text":"Pre-requirement on belenos to bypass MF certificate: git config --global http.sslVerify false\nChoose a directory where you want to clone the IAL repository and cd it (e.g. ~/repositories/)\nTherein, clone the repo: git clone https://github.com/<your github login>/IAL.git\nAnd connect the ACCORD central repo, to fetch tags and updates of official branches:\ngit remote add accord https://github.com/ACCORD-NWP/IAL.git\ngit fetch accord --tags","category":"page"},{"location":"forge-setup.html","page":"Setup","title":"Setup","text":"Your IAL repository is now set up. The accord remote is the distant repo where you will fetch new releases, the origin remote is where you will push your branches (to your fork), for them to be integrated in a next release, issuing a Pull Request. Cf. git remote -v or git branch -r","category":"page"},{"location":"forge-setup.html#Case-of-preexisting-arpifs-repo-from-GCO-on-belenos","page":"Setup","title":"Case of preexisting arpifs repo from GCO on belenos","text":"","category":"section"},{"location":"forge-setup.html","page":"Setup","title":"Setup","text":"If you already have, on belenos HPC, an arpifs repos cloned from the original GCO repo (with Git-GCO toolbox commands), you can connect it anyway to the IAL repo from ACCORD-NWP and to your fork, as they share the same history. In this case:","category":"page"},{"location":"forge-setup.html","page":"Setup","title":"Setup","text":"git remote add my_fork https://github.com/<your github login>/IAL.git   git remote add accord https://github.com/ACCORD-NWP/IAL.git   git fetch accord --tags","category":"page"},{"location":"forge-setup.html","page":"Setup","title":"Setup","text":"Now you can go to step 2: prepare your branch","category":"page"},{"location":"forge-setup.html","page":"Setup","title":"Setup","text":"Originally posted by @AlexandreMary in https://github.com/ACCORD-NWP/IAL/discussions/72","category":"page"}]
}
